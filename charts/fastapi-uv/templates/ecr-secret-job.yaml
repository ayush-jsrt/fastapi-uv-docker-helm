apiVersion: v1
kind: ServiceAccount
metadata:
  name: ecr-secret-creator
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ecr-secret-creator-role
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "create", "delete", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ecr-secret-creator-binding
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ecr-secret-creator-role
subjects:
  - kind: ServiceAccount
    name: ecr-secret-creator
    namespace: {{ .Release.Namespace }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "fastapi-uv.fullname" . }}
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  ttlSecondsAfterFinished: 100
  template:
    spec:
      serviceAccountName: ecr-secret-creator
      restartPolicy: Never
      containers:
      - name: create-ecr-secret
        image: amazon/aws-cli:latest
        env:
        - name: AWS_REGION
          valueFrom:
            secretKeyRef:
              name: awscredentials
              key: AWS_REGION
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: awscredentials
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: awscredentials
              key: AWS_SECRET_ACCESS_KEY
        - name: ECR_REGISTRY
          value: {{ (split "/" .Values.image.repository)._0 | quote }}
        - name: SECRET_NAME
          value: "ecr-registry-secret"
        command:
        - /bin/sh
        - -c
        - |
          set -e
          
          echo "Installing kubectl..."
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mv kubectl /usr/local/bin/
          
          echo "Fetching ECR login token..."
          ECR_PASSWORD=$(aws ecr get-login-password --region $AWS_REGION)
          
          echo "Deleting old ECR secret if exists..."
          kubectl delete secret $SECRET_NAME -n {{ .Release.Namespace }} --ignore-not-found=true
          
          echo "Creating new ECR secret..."
          kubectl create secret docker-registry $SECRET_NAME \
            --docker-server=$ECR_REGISTRY \
            --docker-username=AWS \
            --docker-password=$ECR_PASSWORD \
            -n {{ .Release.Namespace }}
          
          echo "ECR secret created successfully!"